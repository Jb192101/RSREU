# Цель: создать программу, определяющую, какой из методов работает быстрее
# Переменные:
# x - вводимое значение x
# y - действующее значение y
# n - номер итерации
# t0 - переменная, отвечающая за начало отсчёта времени работы программы
# T1, T2 - время работы программы 1 и программы 2
# t - член бесконечной суммы
# eps - значение точности вычисления
# Программист: Барышев Г.А.
# Дата написания: 28.11.2023
from math import e
from time import perf_counter_ns

# Подпрограммы пользователя
# Основная функция
def f(x):
    y = (e**x - e**(-1*x))/2
    return y

# Блок ввода
x = float(input("Введите значение x: "))

# Блок определения времени работы программы 1
t0 = perf_counter_ns()
y = f(x)
T1 = perf_counter_ns() - t0
print("||Метод прямого вычисления||")
print("Значение функции f(x) равно", y)
print("Время работы программы", T1, "наносекунд")
print()

# Блок определения времени работы программы 2
t0 = perf_counter_ns()
t = x
y = 2
eps = 1e-6
n = 2
while abs(t) > eps and n < 1000:
    t *= (x * x) / ((2 * n - 2) * (2 * n - 1))
    y += t
    n += 1
T2 = perf_counter_ns() - t0

print("||Метод разложения функции в ряд||")
print("Значение функции f(x) равно", y)
print("Время работы программы", T2, "наносекунд")
print()

# Блок сравнения полученных данных
print("||Анализ полученных результатов||")
if T2 > T1:
    print("Метод прямого вычисления работает на ", round((T2 / T1 - 1)*100, 4), "процентов быстрее")
elif T2 < T1:
    print("Метод разложения функции в ряд работает на ", round((T1 / T2 - 1)*100, 4), "процентов быстрее")
else:
    print("Время работы обоих методов одинаково")
